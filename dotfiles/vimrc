" Display helpful info at the bottom line
set ruler
" Fix backspace
set bs=2
" Auto Indent on
set ai
" Tab = 2 spaces please thanks
set ts=2
" Most of the time I don't like wrapping
set nowrap
" Enable syntax highlighting
syntax on
" Don't highlight search matches
set nohlsearch
" Don't fill tabs anymore. Keep things the way they are
" Use :retab 2 to undo my own tab damage!
"set expandtab
" Magic to return to previous position in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
  \ exe "normal g'\"" | endif
" Amount of history to store
set viminfo='20,\"50
set history=50 
" My background is dark so display light colours please thanks
set background=dark
source ~/.vim/vis.vim

let g:html_tag_case = 'lowercase'
let g:no_html_tab_mapping = 1
source ~/.vim/HTML.vim
HTML off

set spelllang=en,nl
set spellfile=~/.vim/spell/taal.latin1.add
setlocal spell spelllang=en,nl

let loaded_matchparen = 1

" Yes modelines please
"set modelines=1
"set modeline
" Well use secure ones instead
    
let g:secure_modelines_allowed_items = [
            \ "wrap",
            \ "textwidth",   "tw",
            \ "softtabstop", "sts",
            \ "tabstop",     "ts",
            \ "shiftwidth",  "sw",
            \ "expandtab",   "et",   "noexpandtab", "noet",
            \ "filetype",    "ft",
            \ "foldmethod",  "fdm",
            \ "readonly",    "ro",   "noreadonly", "noro",
            \ "rightleft",   "rl",   "norightleft", "norl",
            \ "spell",
            \ "spelllang"
            \ ]
source ~/.vim/securemodelines.vim

" ttymouse interferes with screen + vim middle mouse click paste
set ttymouse=
set nospell

" Simple persistent statusline:
set laststatus=2

" Use with:
"   git clone https://github.com/itchyny/lightline.vim ~/.vim/pack/plugins/start/lightline
"   git clone https://github.com/itchyny/vim-gitbranch ~/.vim/pack/plugins/start/vim-gitbranch
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name'
      \ },
      \ }
"\ 'colorscheme': 'wombat',
set noshowmode

"" function! InsertStatuslineColor(mode)
""   if a:mode == 'i'
""     hi statusline guibg=Cyan ctermfg=3 guifg=Black ctermbg=0
""   elseif a:mode == 'r'
""     hi statusline guibg=Purple ctermfg=5 guifg=Black ctermbg=0
""   else
""     hi statusline guibg=DarkRed ctermfg=1 guifg=Black ctermbg=0
""   endif
"" endfunction
"" 
"" au InsertEnter * call InsertStatuslineColor(v:insertmode)
"" au InsertLeave * hi statusline guibg=DarkBlue ctermfg=4 guifg=White ctermbg=15
"" 
"" " default the statusline to green when entering Vim
"" hi statusline guibg=DarkBlue ctermfg=4 guifg=White ctermbg=15
"" 
"" " Formats the statusline
"" set statusline=%F                           " file name
"" set statusline+=\ [%{strlen(&fenc)?&fenc:'none'}, "file encoding
"" set statusline+=\ %{&ff}] "file format
"" set statusline+=%y      "filetype
"" set statusline+=%h      "help file flag
"" set statusline+=%m      "modified flag
"" set statusline+=%r      "read only flag
"" 
"" "" Puts in the current git status
"" "    if count(g:pathogen_disabled, 'Fugitive') < 1
"" "        set statusline+=%{fugitive#statusline()}
"" "    endif
"" "
"" "" Puts in syntastic warnings
"" "    if count(g:pathogen_disabled, 'Syntastic') < 1
"" "        set statusline+=%#warningmsg#
"" "        set statusline+=%{SyntasticStatuslineFlag()}
"" "        set statusline+=%*
"" "    endif
"" 
"" set statusline+=\ %=                        " align left
"" set statusline+=Line:%l/%L[%p%%]            " line X of Y [percent of file]
"" set statusline+=\ Col:%c                    " current column
"" set statusline+=\ Buf:%n                    " Buffer number
"" set statusline+=\ [%b][0x%B]\               " ASCII and byte code under cursor

autocmd BufReadPost,FileReadPost,BufNewFile,BufEnter * call system("tmux rename-window " . expand("%:t"))

set number
